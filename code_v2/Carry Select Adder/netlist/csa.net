CARRY SELECT ADDER
.option filetype=ascii

***LIBRERIE***
.INCLUDE ../lib/ST65LIKE_cell_library_v2020_1.net
.INCLUDE ../lib/16nm_HP.pm

***PARAMETRI GLOBALI***
.PARAM ALIM=1.000000
.PARAM Lmin=16n
.PARAM Wmin=16n
.PARAM XXX=1
.TRAN 0.1p 820p

***Setup logic
***Indipendente Numero dei bit nel circuito finale (NO CAMBIARE)
.subckt SETUP_SUB 0 Vdd p g inA inB XX=1
	xp 0 Vdd p inA inB XOR2_SUB XX=1
	xg 0 Vdd g inA inB AND2_SUB XX=1
.ends

***Cout Logic

***Indipendente Numero dei bit nel circuito finale (NO CAMBIARE)
.subckt COUT_SUB 0 Vdd cout g p cin XX=1
	xand 0 Vdd node p cin AND2_SUB XX=1
	xnor 0 Vdd Coutnot g node NOR2_SUB XX=1
	xor 0 Vdd cout Coutnot NOT_SUB XX=1
.ends

***Adder 4 bit
***Indipendente Numero dei bit nel circuito finale (NO CAMBIARE)
.subckt FAcsa_SUB 0 Vdd sum0 sum1 sum2 sum3 cout3 cout-1 p0 p1 p2 p3 g0 g1 g2 g3 XX=1
	xsum0 0 Vdd sum0 p0 cout-1 XOR2_SUB XX=1
	xcout0 0 Vdd cout0 g0 p0 cout-1 COUT_SUB XX=1 
	xsum1 0 Vdd sum1 p1 cout0 XOR2_SUB XX=1
	xcout1 0 Vdd cout1 g1 p1 cout0 COUT_SUB XX=1
	xsum2 0 Vdd sum2 p2 cout1 XOR2_SUB XX=1
	xcout2 0 Vdd cout2 g2 p2 cout1 COUT_SUB XX=1
	xsum3 0 Vdd sum3 p3 cout2 XOR2_SUB XX=1
	xcout3 0 Vdd cout3 g3 p3 cout2 COUT_SUB XX=1
.ends 

***CSA 4 bit
***Indipendente Numero dei bit nel circuito finale (NO CAMBIARE)
.subckt CSA4_SUB 0 Vdd sum0 sum1 sum2 sum3 cout cin0 cin1 cin ain0 ain1 ain2 ain3 bin0 bin1 bin2 bin3 XX=1
	xsetup0 0 Vdd p0 g0 ain0 bin0 SETUP_SUB XX=1
	xsetup1 0 Vdd p1 g1 ain1 bin1 SETUP_SUB XX=1
	xsetup2 0 Vdd p2 g2 ain2 bin2 SETUP_SUB XX=1
	xsetup3 0 Vdd p3 g3 ain3 bin3 SETUP_SUB XX=1
	xadd0 0 Vdd sum00 sum01 sum02 sum03 cout03 cin0 p0 p1 p2 p3 g0 g1 g2 g3 FAcsa_SUB XX=1
	xadd1 0 Vdd sum10 sum11 sum12 sum13 cout13 cin1 p0 p1 p2 p3 g0 g1 g2 g3 FAcsa_SUB XX=1
	xmuxcout 0 Vdd cout cout03 cout13 cin mux21_SUB XX=1
	xmuxs0 0 Vdd sum0 sum00 sum10 cin mux21_SUB XX=1
	xumxs1 0 Vdd sum1 sum01 sum11 cin mux21_SUB XX=1
	xmuxs2 0 Vdd sum2 sum02 sum12 cin mux21_SUB XX=1
	xmuxs3 0 Vdd sum3 sum03 sum13 cin mux21_SUB XX=1
.ends

***Questo componente racchiude per numeroBit>4 piÃ¹ CSA4_SUB quindi cambia in base al numero dei bit
.subckt CSA_SUB 0 Vdd sum0 sum1 sum2 sum3 cout3 cin0 cin1 cin ain0 ain1 ain2 ain3 bin0 bin1 bin2 bin3 XX=1
	xcsa4_0 0 Vdd sum0 sum1 sum2 sum3 cout3 cin0 cin1 cin ain0 ain1 ain2 ain3 bin0 bin1 bin2 bin3 CSA4_SUB XX=1
.ends

xcsa 0 Vcc s0 s1 s2 s3 CCout C0 C1 Ci a0 a1 a2 a3 b0 b1 b2 b3 CSA_SUB XX=1

VinA3 A3 0 ALIM
VinA2 A2 0 ALIM
VinA1 A1 0 0
VinA0 A0 0 0
VinB3 B3 0 0
VinB2 B2 0 0
VinB1 B1 0 ALIM
VinB0 B0 0 ALIM
***Tensioni Fisse
V_C0 C0 0 0
V_C1 C1 0 ALIM
V_dd Vcc 0 ALIM
V_Ci Ci 0 0

.control
run
let k= length(time)-1
print s0[k] s1[k] s2[k] s3[k]>outputValue.txt
quit
.endc
.end